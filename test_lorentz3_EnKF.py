import numpy as np
from src.classes import Lorentz3
import matplotlib.pyplot as plt
import seaborn as sns
ic_seed=0
sigma_o = 1.0
sigma_n = 3.0
sigma_q= 0.6
T=2000
discard_len=1000
sigma = 10.; beta = 8/3; rho = 28.
model = Lorentz3(sigma = sigma, beta = beta, rho = rho,ic_seed=0,dt=0.01,int_steps=10,obs_noise=sigma_o,noise_seed=0)
x_o,x_t = np.ascontiguousarray(model.run(T+1,discard_len))
#define observational operator H here, such that y_o=H x_o
#H_obs=np.array([[1,0,0],[0,1,0]])
H_obs=np.eye(3)
y_o = model.observe(H_obs,x_o)
P_b=np.eye(3)
P_b[0,0] = 0.47
P_b[1,1] = 1.11
P_b[2,2] = 0.91
Q_b=sigma_q**2 * np.eye(3)
#for full state
#for no z
#Q_b[0,0]=0.23
#P_b[0,0]=0.23
#Q_b[1,1]=0.5
#P_b[1,1]=0.5
R_o=sigma_o**2 * np.eye(H_obs.shape[0])
x_a,x_b,d_ob,d_ab,d_oa,P_bs,P_as=model.EnKF(H_obs,y_o,P_b,R_o,x_t,sigma_n,T,rho=3.38)
x_a_2,x_b_2,d_ob_2,d_ab_2,d_oa_2,P_bs_2,P_as_2=model.EKF(H_obs,y_o,P_b,R_o,Q_b,x_t,sigma_n,T)
print(np.mean((x_a-x_t[1:])**2))
print(np.mean((x_b-x_t[1:])**2))
trace_Pb=np.zeros(T)
for i in range(T):
    diff=(x_b[i]-x_a[i]).reshape(1,-1)
    trace_Pb[i]= np.trace(diff.T @ diff)
d_oa_norm=np.sqrt(np.sum(d_oa**2,axis=1))
d_ob_norm=np.sqrt(np.sum(d_ob**2,axis=1))
cos_boa=np.diag(d_ob@d_oa.T)/(d_oa_norm*d_ob_norm)
ratio_boa=d_oa_norm/d_ob_norm
plt.rcParams.update({'font.size': 22})
fig, axs = plt.subplots(3, 1, sharex = True,figsize=(10,10))
axs[0].plot(x_o[:1000,0], 'r', label = 'x_o')
axs[1].plot(x_o[:1000,1], 'r', label = 'x_o')
axs[2].plot(x_o[:1000,2], 'r', label = 'x_o')
axs[0].set_ylabel('x1(t)')
axs[1].set_ylabel('x2(t)')
axs[2].set_ylabel('x3(t)')
axs[0].legend()
axs[2].set_xlabel(f'Iteration (dt = {model.dt})')
fig.suptitle('x_o with sigma_noise='+str(sigma_o))
plt.rcParams.update({'font.size': 22})
fig2, axs2 = plt.subplots(H_obs.shape[0], 1, sharex = True,figsize=(10,10))
for i in range(H_obs.shape[0]):
    axs2[i].plot(y_o[:1000,i], 'r', label = 'y_o')
    axs2[i].plot((x_t@H_obs.T)[:1000,i],'k',label = 'H_obs @ x_t')
    axs2[i].set_ylabel('y'+str(i+1)+'(t)')
axs2[0].legend()
axs2[-1].set_xlabel(f'Iteration (dt = {model.dt})')
np.set_printoptions(precision=2, suppress=True)
str2=str(np.matrix(H_obs))
fig2.suptitle(" ".join(['y_o with H =', str2]))
plt.rcParams.update({'font.size': 22})

fig3, axs = plt.subplots(3, 1, sharex = True,figsize=(10,10))
axs[0].plot(x_b[:1000,0], 'g', label = 'x_b')
axs[1].plot(x_b[:1000,1], 'g', label = 'x_b')
axs[2].plot(x_b[:1000,2], 'g', label = 'x_b')
axs[0].plot(x_t[:1000,0], 'k', label = 'x_t')
axs[1].plot(x_t[:1000,1], 'k', label = 'x_t')
axs[2].plot(x_t[:1000,2], 'k', label = 'x_t')
axs[0].set_ylabel('x1(t)')
axs[1].set_ylabel('x2(t)')
axs[2].set_ylabel('x3(t)')
axs[0].legend()
axs[2].set_xlabel(f'Iteration (dt = {model.dt})')
fig3.suptitle('x_b with no DA and sigma_n ='+str(sigma_n))

fig4, axs = plt.subplots(3, 1, sharex = True,figsize=(10,10))
axs[0].plot(x_a[:1000,0], 'g', label = 'x_a')
axs[1].plot(x_a[:1000,1], 'g', label = 'x_a')
axs[2].plot(x_a[:1000,2], 'g', label = 'x_a')
axs[0].plot(x_t[:1000,0], 'k', label = 'x_t')
axs[1].plot(x_t[:1000,1], 'k', label = 'x_t')
axs[2].plot(x_t[:1000,2], 'k', label = 'x_t')
axs[0].set_ylabel('x1(t)')
axs[1].set_ylabel('x2(t)')
axs[2].set_ylabel('x3(t)')
axs[0].legend()
axs[2].set_xlabel(f'Iteration (dt = {model.dt})')
fig4.suptitle('assimilation with y_o with sigma_noise='+str(sigma_o))

fig5, axs5 = plt.subplots(H_obs.shape[0], 1, sharex = True,figsize=(5,10))
for i in range(H_obs.shape[0]):
    axs5[i].plot(d_ob[:,i], 'r', label = 'd_ob')
    axs5[i].set_ylabel('y'+str(i+1)+'(t)')
axs2[0].legend()
axs2[-1].set_xlabel(f'Iteration (dt = {model.dt})')
np.set_printoptions(precision=2, suppress=True)
str5=str(np.matrix(H_obs))
fig5.suptitle(" ".join(['d_ob with H =', str5]))
fig6, axs6 = plt.subplots(1, 1, sharex = True,figsize=(10,10))
axs6.plot(trace_Pb)
fig6.suptitle('trace of Pb vs time')
fig7, axs7 = plt.subplots(4,2, sharex = True,figsize=(10,10))
axs7=axs7.flatten()
sns.heatmap(d_ob.T @ d_ob/T,ax=axs7[0],vmin=0,vmax=3.0)
axs7[0].set_title("E(d_ob d_ob^T)")
sns.heatmap(H_obs@P_b@H_obs.T+R_o,ax=axs7[1],vmin=0,vmax=3.0)
axs7[1].set_title("HP_bH^T + R_o")
sns.heatmap(d_ab.T @ d_ob/T,ax=axs7[2],vmin=0,vmax=3.0)
axs7[2].set_title("E(d_ab d_ob^T)")
sns.heatmap(H_obs@P_b@H_obs.T,ax=axs7[3],vmin=0,vmax=3.0)
axs7[3].set_title("HP_bH^T")
sns.heatmap(d_oa.T @ d_ob/T,ax=axs7[4],vmin=0,vmax=3.0)
axs7[4].set_title("E(d_oa d_ob^T)")
sns.heatmap(R_o,ax=axs7[5],vmin=0,vmax=2.2)
axs7[5].set_title("R_o")
sns.heatmap(d_ab.T @ d_oa/T,ax=axs7[6],vmin=0,vmax=2.2)
print(d_ab.T @ d_ob/T)
print(d_ob.T @ d_ob/T)
axs7[6].set_title("E(d_ab d_oa^T)")
sns.heatmap(H_obs@((x_a-x_t[1:]).T @ (x_a-x_t[1:])/T)@H_obs.T,ax=axs7[7],vmin=0,vmax=2.2)
axs7[7].set_title("HP^aH^T")
fig7.suptitle('Correlation matrices comparision with theory with T='+str(T))
fig7.tight_layout()
fig10, axs10 = plt.subplots(2, 1, sharex = True,figsize=(10,10))
axs10=axs10.flatten()
axs10[0].plot(cos_boa)
axs10[1].plot(ratio_boa)
axs10[1].axhline(y=1, color='r', linestyle='-')
axs10[0].set_title("cos theta_boa")
axs10[1].set_title("|d_oa|/|d_ob|")
fig8, axs8 = plt.subplots(2, 1, sharex = True,figsize=(10,10))
axs8=axs8.flatten()
axs8[0].plot(np.mean(((P_bs-P_bs_2)**2).reshape(T+1,9),axis=1))
axs8[1].plot(np.mean(((P_as-P_as_2)**2).reshape(T+1,9),axis=1))
axs8[0].set_title("mean squared error of P_b of EnKF vs EKF")
axs8[1].set_title("mean squared error of P_a of EnKF vs EKF")
fig9, axs9 = plt.subplots(3, 1, sharex = True,figsize=(10,10))
axs9=axs9.flatten()
axs9[0].plot((P_bs-P_bs_2)[:,0,0])
axs9[0].set_ylabel("element 1 1")
axs9[1].plot((P_bs-P_bs_2)[:,1,1])
axs9[1].set_ylabel("element 2 2")
axs9[2].plot((P_bs-P_bs_2)[:,2,2])
axs9[2].set_ylabel("element 3 3")
axs9[0].set_title("P_b(t) of EnKF -P_b(t) of EKF")
fig11, axs11 = plt.subplots(3, 1, sharex = True,figsize=(10,10))
axs11=axs11.flatten()
axs11[0].plot((P_as-P_as_2)[:,0,0])
axs11[0].set_ylabel("element 1 1")
axs11[1].plot((P_as-P_as_2)[:,1,1])
axs11[1].set_ylabel("element 2 2")
axs11[2].plot((P_as-P_as_2)[:,2,2])
axs11[2].set_ylabel("element 3 3")
axs11[0].set_title("P_a(t) of EnKF -P_a(t) of EKF")
plt.show()